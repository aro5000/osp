const std = @import("std");

pub const ROWS_SIZE: u8 = 7;
pub const COLUMNS_SIZE: u8 = 5;

// zig fmt: off
pub fn GetCharsMap(map: *std.hash_map.HashMap(u8,[ROWS_SIZE][COLUMNS_SIZE]u8,std.hash_map.AutoContext(u8),80)) !void {
    try map.put('a',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{ '.', '.','X', '.', '.'},
    .{ '.', 'X','.', 'X', '.'},
    .{ 'X', '.','.', '.', 'X'},
    .{ 'X', 'X','X', 'X', 'X'},
    .{ 'X', '.','.', '.', 'X'},
    .{ 'X', '.','.', '.', 'X'},
    .{ 'X', '.','.', '.', 'X'},
    }); try map.put('A', map.get('a').?);

    try map.put('b',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', '.'},
    }); try map.put('B', map.get('b').?);

    try map.put('c',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'.', 'X', 'X', 'X', 'X'},
    }); try map.put('C', map.get('c').?);

    try map.put('d',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', '.'},
    }); try map.put('D', map.get('d').?);

    try map.put('e',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    }); try map.put('E', map.get('e').?);

    try map.put('f',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    }); try map.put('F', map.get('f').?);

    try map.put('g',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'.', 'X', 'X', 'X', '.'},
    }); try map.put('G', map.get('g').?);

    try map.put('h',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('H', map.get('h').?);

    try map.put('i',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', 'X'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    }); try map.put('I', map.get('i').?);

    try map.put('j',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', 'X', 'X'},
    .{'.', '.', '.', 'X', '.'},
    .{'.', '.', '.', 'X', '.'},
    .{'.', '.', '.', 'X', '.'},
    .{'.', '.', '.', 'X', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'.', 'X', 'X', '.', '.'},
    }); try map.put('J', map.get('j').?);

    try map.put('k',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', 'X', '.', '.'},
    .{'X', 'X', '.', '.', '.'},
    .{'X', '.', 'X', '.', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('K', map.get('k').?);

    try map.put('l',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    }); try map.put('L', map.get('l').?);

    try map.put('m',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', '.', 'X', 'X'},
    .{'X', '.', 'X', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('M', map.get('m').?);

    try map.put('n',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', 'X', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', 'X', 'X'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('N', map.get('n').?);

    try map.put('o',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'.', 'X', 'X', 'X', '.'},
    }); try map.put('O', map.get('o').?);

    try map.put('p',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    }); try map.put('P', map.get('p').?);

    try map.put('q',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', '.', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'.', 'X', 'X', '.', 'X'},
    }); try map.put('Q', map.get('q').?);

    try map.put('r',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', '.'},
    .{'X', '.', 'X', '.', '.'},
    .{'X', '.', '.', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('R', map.get('r').?);

    try map.put('s',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', 'X'},
    .{'X', '.', '.', '.', '.'},
    .{'X', '.', '.', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    .{'.', '.', '.', '.', 'X'},
    .{'.', '.', '.', '.', 'X'},
    .{'X', 'X', 'X', 'X', 'X'},
    }); try map.put('S', map.get('s').?);

    try map.put('t',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', 'X'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    }); try map.put('T', map.get('t').?);

    try map.put('u',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'.', 'X', 'X', 'X', '.'},
    }); try map.put('U', map.get('u').?);

    try map.put('v',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'.', 'X', '.', 'X', '.'},
    .{'.', '.', 'X', '.', '.'},
    }); try map.put('V', map.get('v').?);

    try map.put('w',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', '.', '.', 'X'},
    .{'X', '.', 'X', '.', 'X'},
    .{'X', 'X', '.', 'X', 'X'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('W', map.get('w').?);

    try map.put('x',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'.', 'X', '.', 'X', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', 'X', '.', 'X', '.'},
    .{'X', '.', '.', '.', 'X'},
    }); try map.put('X', map.get('x').?);

    try map.put('y',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', '.', '.', '.', 'X'},
    .{'.', 'X', '.', 'X', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', '.', 'X', '.', '.'},
    }); try map.put('Y', map.get('y').?);

    try map.put('z',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'X', 'X', 'X', 'X', 'X'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', 'X', '.'},
    .{'.', '.', 'X', '.', '.'},
    .{'.', 'X', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'X', 'X', 'X', 'X', 'X'},
    }); try map.put('Z', map.get('z').?);

    try map.put(' ',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', '.', '.', '.', '.'},
    });

    try map.put('!',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    });

    try map.put(':',[ROWS_SIZE][COLUMNS_SIZE]u8{
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', '.', '.', '.', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    .{'.', 'X', 'X', 'X', '.'},
    });
}

test "only . and X in map" {

    var map = std.AutoHashMap(u8, [ROWS_SIZE][COLUMNS_SIZE]u8).init(std.testing.allocator);
    defer map.deinit();
    try GetCharsMap(&map);

    var iter = map.valueIterator();

    while (iter.next()) |row| {
        for (row) |column|{
            for (column) |char| {
                try std.testing.expect(char == '.' or char == 'X');
            }
        }
    }
}